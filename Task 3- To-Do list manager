#include <iostream>
#include <vector>
#include <string>
using namespace std;
struct Task 
{
     string description;
    bool completed;

    Task(string desc) : description(desc), completed(false) {}
};

void addTask(vector<Task>& tasks);
void viewTasks(const vector<Task>& tasks);
void markTaskCompleted(vector<Task>& tasks);
void removeTask(vector<Task>& tasks);

int main() 
{
    vector<Task> tasks;
    int choice;

    do {
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task to the to-do list\n";
        cout << "2. View Tasks in the to-do list\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task from the to-do list\n";
        cout << "5. Exit the to do list\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();  

        switch (choice)
        {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                cout << "Exit the to do list \n";
                break;
            default:
                cout << "Error!Invalid choice. Please choose between 1 to 5\n";
                break;
        }
    } while (choice != 5);

    return 0;
}


void addTask(vector<Task>& tasks)
{
    string description;
    cout << "Enter the task to do: ";
    getline(cin, description);
    tasks.push_back(Task(description));
    cout << "Task added in the to-do list.\n";
}

void viewTasks(const vector<Task>& tasks)
{
    if (tasks.empty()) {
        cout << "No tasks available in the to-do list.\n";
        return;
    }
    for (size_t i = 0; i < tasks.size(); ++i)
    {
        cout << i + 1 << ". " << tasks[i].description 
             << " [" << (tasks[i].completed ? "Task Completed" : "Task Pending") << "]\n";
    }
}

void markTaskCompleted(vector<Task>& tasks) 
{
    if (tasks.empty()) 
    {
        cout << "No tasks available to mark as completed.\n";
        return;
    }
    int taskNumber;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskNumber;
    cin.ignore();   
    if (taskNumber < 1 || taskNumber > tasks.size())
    {
        cout << "Invalid task number.\n";
    }
    else
    {
        tasks[taskNumber - 1].completed = true;
        cout << "Task marked as completed.\n";
    }
}

void removeTask(vector<Task>& tasks)
{
    if (tasks.empty())
    {
        cout << "No tasks available to remove from the to-do list.\n";
        return;
    }
    int taskNumber;
    cout << "Enter the task number to remove from the to-do list: ";
    cin >> taskNumber;
    cin.ignore();  
    
    if (taskNumber < 1 || taskNumber > tasks.size()) 
    {
        cout << "Invalid task number.\n";
    }
    else 
    {
        tasks.erase(tasks.begin() + taskNumber - 1);
        cout << "Task removed.\n";
    }
}
